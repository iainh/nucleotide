warning: field `compatibility` is never read
  --> crates/nucleotide-ui/src/advanced_theming/helix_bridge.rs:17:5
   |
11 | pub struct HelixThemeBridge {
   |            ---------------- field in this struct
...
17 |     compatibility: CompatibilitySettings,
   |     ^^^^^^^^^^^^^
   |
   = note: `HelixThemeBridge` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: field `last_check` is never read
  --> crates/nucleotide-ui/src/advanced_theming/theme_animator.rs:68:5
   |
62 | pub struct PerformanceMonitor {
   |            ------------------ field in this struct
...
68 |     last_check: Instant,
   |     ^^^^^^^^^^
   |
   = note: `PerformanceMonitor` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: multiple methods are never used
   --> crates/nucleotide-ui/src/advanced_theming/theme_builder.rs:399:8
    |
123 | impl ThemeBuilder {
    | ----------------- methods in this implementation
...
399 |     fn apply_color_override(&self, theme: &mut Theme, key: &str, color: Hsla) {
    |        ^^^^^^^^^^^^^^^^^^^^
...
436 |     fn apply_size_override(&self, theme: &mut Theme, key: &str, size: Pixels) {
    |        ^^^^^^^^^^^^^^^^^^^
...
468 |     fn validate_essential_colors(&self, theme: &Theme) -> Result<(), ThemeBuildError> {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^
...
485 |     fn validate_contrast(&self, theme: &Theme) -> Result<(), ThemeBuildError> {
    |        ^^^^^^^^^^^^^^^^^
...
503 |     fn calculate_contrast_ratio(&self, color1: Hsla, color2: Hsla) -> f32 {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^
...
514 |     fn relative_luminance(&self, color: Hsla) -> f32 {
    |        ^^^^^^^^^^^^^^^^^^
...
540 |     fn hsl_to_rgb(&self, h: f32, s: f32, l: f32) -> (f32, f32, f32) {
    |        ^^^^^^^^^^

warning: methods `padding` and `text_size` are never used
   --> crates/nucleotide-ui/src/button.rs:94:8
    |
93  | impl ButtonSize {
    | --------------- methods in this implementation
94  |     fn padding(&self) -> (Pixels, Pixels) {
    |        ^^^^^^^
...
104 |     fn text_size(&self) -> Pixels {
    |        ^^^^^^^^^

warning: method `padding` is never used
   --> crates/nucleotide-ui/src/list_item.rs:152:8
    |
151 | impl ListItemSpacing {
    | -------------------- method in this implementation
152 |     fn padding(&self) -> (Pixels, Pixels) {
    |        ^^^^^^^

warning: fields `id` and `element_id` are never read
  --> crates/nucleotide-ui/src/providers/mod.rs:76:5
   |
75 | pub struct ProviderScope {
   |            ------------- fields in this struct
76 |     id: ProviderScopeId,
   |     ^^
77 |     element_id: Option<ElementId>,
   |     ^^^^^^^^^^
   |
   = note: `ProviderScope` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: field `provider` is never read
   --> crates/nucleotide-ui/src/providers/mod.rs:389:5
    |
388 | struct ProviderEntry {
    |        ------------- field in this struct
389 |     provider: Box<dyn Any + Send + Sync>,
    |     ^^^^^^^^

warning: associated function `derive_ui_theme` is never used
   --> crates/nucleotide-ui/src/theme_manager.rs:434:8
    |
102 | impl ThemeManager {
    | ----------------- associated function in this implementation
...
434 |     fn derive_ui_theme(helix_theme: &HelixTheme) -> UITheme {
    |        ^^^^^^^^^^^^^^^

warning: method `get_color` is never used
  --> crates/nucleotide-ui/src/vcs_indicator.rs:67:8
   |
37 | impl VcsIndicator {
   | ----------------- method in this implementation
...
67 |     fn get_color(&self, theme: &crate::Theme) -> gpui::Hsla {
   |        ^^^^^^^^^

warning: creating a shared reference to mutable static
  --> crates/nucleotide-ui/src/providers/mod.rs:37:9
   |
37 | /         PROVIDER_CONTEXT
38 | |             .as_ref()
   | |_____________________^ shared reference to mutable static
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
   = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives
   = note: `#[warn(static_mut_refs)]` on by default

warning: creating a shared reference to mutable static
  --> crates/nucleotide-ui/src/providers/mod.rs:49:9
   |
49 |         PROVIDER_CONTEXT.as_ref().map_or(false, |context| {
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
   = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives

warning: creating a mutable reference to mutable static
  --> crates/nucleotide-ui/src/utils/mod.rs:38:14
   |
38 |     unsafe { PERFORMANCE_MONITOR.as_mut().map(f) }
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable reference to mutable static
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
   = note: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives

warning: creating a shared reference to mutable static
  --> crates/nucleotide-ui/src/utils/feature_flags.rs:25:9
   |
25 | /         FEATURE_FLAGS
26 | |             .as_ref()
   | |_____________________^ shared reference to mutable static
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
   = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives

warning: creating a shared reference to mutable static
  --> crates/nucleotide-ui/src/utils/feature_flags.rs:37:9
   |
37 |         FEATURE_FLAGS.as_ref().map_or(false, |flags| {
   |         ^^^^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
   = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives

warning: creating a mutable reference to mutable static
  --> crates/nucleotide-ui/src/utils/focus.rs:23:14
   |
23 |     unsafe { FOCUS_MANAGER.as_mut().map(f) }
   |              ^^^^^^^^^^^^^^^^^^^^^^ mutable reference to mutable static
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
   = note: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives

warning: `nucleotide-ui` (lib) generated 15 warnings
   Compiling nucleotide v0.1.0 (/home/iheggie/nucleotide/crates/nucleotide)
error[E0432]: unresolved import `nucleotide_core::utils::detect_bundle_runtime`
  --> crates/nucleotide/src/utils.rs:5:34
   |
5  | pub use nucleotide_core::utils::{detect_bundle_runtime, handle_key_result, translate_key};
   |                                  ^^^^^^^^^^^^^^^^^^^^^ no `detect_bundle_runtime` in `utils`
   |
note: found an item that was configured out
  --> /home/iheggie/nucleotide/crates/nucleotide-core/src/utils.rs:10:8
   |
10 | pub fn detect_bundle_runtime() -> Option<std::path::PathBuf> {
   |        ^^^^^^^^^^^^^^^^^^^^^
note: the item is gated behind the `macos` feature
  --> /home/iheggie/nucleotide/crates/nucleotide-core/src/utils.rs:9:7
   |
9  | #[cfg(target_os = "macos")]
   |       ^^^^^^^^^^^^^^^^^^^

error[E0432]: unresolved import `serde`
 --> crates/nucleotide/src/config.rs:7:5
  |
7 | use serde::{Deserialize, Serialize};
  |     ^^^^^ use of unresolved module or unlinked crate `serde`
  |
  = help: if you wanted to use a crate named `serde`, use `cargo add serde` to add it to your `Cargo.toml`

error: cannot find attribute `serde` in this scope
  --> crates/nucleotide/src/config.rs:20:7
   |
20 |     #[serde(default)]
   |       ^^^^^

error: cannot find attribute `serde` in this scope
  --> crates/nucleotide/src/config.rs:28:7
   |
28 |     #[serde(default)]
   |       ^^^^^

error: cannot find attribute `serde` in this scope
  --> crates/nucleotide/src/config.rs:34:3
   |
34 | #[serde(rename_all = "lowercase")]
   |   ^^^^^

error: cannot find attribute `serde` in this scope
  --> crates/nucleotide/src/config.rs:49:7
   |
49 |     #[serde(default)]
   |       ^^^^^

error: cannot find attribute `serde` in this scope
  --> crates/nucleotide/src/config.rs:53:7
   |
53 |     #[serde(default)]
   |       ^^^^^

error: cannot find attribute `serde` in this scope
  --> crates/nucleotide/src/config.rs:57:7
   |
57 |     #[serde(default)]
   |       ^^^^^

error: cannot find attribute `serde` in this scope
  --> crates/nucleotide/src/config.rs:81:7
   |
81 |     #[serde(default)]
   |       ^^^^^

error: cannot find attribute `serde` in this scope
  --> crates/nucleotide/src/config.rs:85:7
   |
85 |     #[serde(default = "default_true")]
   |       ^^^^^

error: cannot find attribute `serde` in this scope
  --> crates/nucleotide/src/config.rs:97:7
   |
97 |     #[serde(default)]
   |       ^^^^^

error: cannot find attribute `serde` in this scope
   --> crates/nucleotide/src/config.rs:101:7
    |
101 |     #[serde(default)]
    |       ^^^^^

error: cannot find attribute `serde` in this scope
   --> crates/nucleotide/src/config.rs:105:7
    |
105 |     #[serde(default)]
    |       ^^^^^

error: cannot find attribute `serde` in this scope
   --> crates/nucleotide/src/config.rs:109:7
    |
109 |     #[serde(default)]
    |       ^^^^^

warning: unused import: `hsla`
 --> crates/nucleotide/src/document.rs:7:23
  |
7 |     black, div, fill, hsla, px, relative, white, App, Bounds, Context, DefiniteLength,
  |                       ^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `nucleotide_logging::debug`
  --> crates/nucleotide/src/document.rs:48:9
   |
48 |     use nucleotide_logging::debug;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `nucleotide_logging::debug`
  --> crates/nucleotide/src/document.rs:81:9
   |
81 |     use nucleotide_logging::debug;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `nucleotide_ui::theme_manager::HelixThemedContext`
  --> crates/nucleotide/src/file_tree/view.rs:16:5
   |
16 | use nucleotide_ui::theme_manager::HelixThemedContext;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `nucleotide_ui::theme_utils::color_to_hsla`
  --> crates/nucleotide/src/file_tree/view.rs:17:5
   |
17 | use nucleotide_ui::theme_utils::color_to_hsla;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::utils::color_to_hsla`
 --> crates/nucleotide/src/statusline.rs:1:5
  |
1 | use crate::utils::color_to_hsla;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `App` and `Hsla`
 --> crates/nucleotide/src/statusline.rs:4:14
  |
4 |     div, px, App, Context, Entity, EventEmitter, Hsla, IntoElement, ParentElement, Render, Styled,
  |              ^^^                                 ^^^^

warning: unused imports: `StyleSize`, `StyleState`, `StyleVariant`, and `compute_component_style`
 --> crates/nucleotide/src/statusline.rs:9:21
  |
9 | use nucleotide_ui::{compute_component_style, StyleSize, StyleState, StyleVariant};
  |                     ^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^  ^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `StatefulInteractiveElement`
 --> crates/nucleotide/src/tab_bar.rs:6:59
  |
6 |     div, px, App, IntoElement, ParentElement, RenderOnce, StatefulInteractiveElement, Styled,
  |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ColorTheory`, `StyleSize`, `StyleState`, `StyleVariant`, and `compute_component_style`
  --> crates/nucleotide/src/tab_bar.rs:12:5
   |
12 |     compute_component_style, ColorTheory, StyleSize, StyleState, StyleVariant, VcsStatus,
   |     ^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^^^  ^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `StatefulInteractiveElement`
 --> crates/nucleotide/src/tab_overflow_dropdown.rs:7:31
  |
7 |     RenderOnce, SharedString, StatefulInteractiveElement, Styled, Window,
  |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `nucleotide_ui::theme_manager::HelixThemedContext`
  --> crates/nucleotide/src/tab_overflow_dropdown.rs:10:5
   |
10 | use nucleotide_ui::theme_manager::HelixThemedContext;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ColorContext`, `StyleSize`, `StyleState`, `StyleVariant`, and `compute_contextual_style`
  --> crates/nucleotide/src/tab_overflow_dropdown.rs:12:5
   |
12 |     compute_contextual_style, ColorContext, StyleSize, StyleState, StyleVariant,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^  ^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused variable: `style_variant`
   --> crates/nucleotide/src/tab.rs:243:13
    |
243 |         let style_variant: StyleVariant = self.variant.into();
    |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_style_variant`
    |
    = note: `#[warn(unused_variables)]` on by default

error[E0277]: the trait bound `GuiConfig: DeserializeOwned` is not satisfied
   --> crates/nucleotide/src/config.rs:204:33
    |
204 |         let config: GuiConfig = toml::from_str(&config_str)?;
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'de> toml::macros::Deserialize<'de>` is not implemented for `GuiConfig`
    |
    = help: the following other types implement trait `toml::macros::Deserialize<'de>`:
              `&'a [u8]` implements `toml::macros::Deserialize<'de>`
              `&'a serde_json::raw::RawValue` implements `toml::macros::Deserialize<'de>`
              `&'a serde_json_lenient::raw::RawValue` implements `toml::macros::Deserialize<'de>`
              `&'a std::path::Path` implements `toml::macros::Deserialize<'de>`
              `&'a str` implements `toml::macros::Deserialize<'de>`
              `()` implements `toml::macros::Deserialize<'de>`
              `(T,)` implements `toml::macros::Deserialize<'de>`
              `(T0, T1)` implements `toml::macros::Deserialize<'de>`
            and 887 others
    = note: required for `GuiConfig` to implement `DeserializeOwned`
note: required by a bound in `toml::from_str`
   --> /home/iheggie/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml-0.8.23/src/de.rs:43:8
    |
41  | pub fn from_str<T>(s: &'_ str) -> Result<T, Error>
    |        -------- required by a bound in this function
42  | where
43  |     T: serde::de::DeserializeOwned,
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `from_str`

warning: unused import: `gpui::prelude`
 --> crates/nucleotide/src/tab.rs:5:5
  |
5 | use gpui::prelude::*;
  |     ^^^^^^^^^^^^^

warning: unused variable: `i`
  --> crates/nucleotide/src/document.rs:93:10
   |
93 |     for (i, x_pos) in test_positions.iter().enumerate() {
   |          ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `char_index`
  --> crates/nucleotide/src/document.rs:98:13
   |
98 |         let char_index = line_text
   |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_char_index`

warning: unused variable: `font_size`
  --> crates/nucleotide/src/document.rs:80:79
   |
80 | fn test_shaped_line_accuracy(shaped_line: &gpui::ShapedLine, line_text: &str, font_size: f32) {
   |                                                                               ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_font_size`

warning: value assigned to `last_char_pos` is never read
   --> crates/nucleotide/src/document.rs:795:21
    |
795 |                     last_char_pos = char_pos;
    |                     ^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?
    = note: `#[warn(unused_assignments)]` on by default

warning: unused variable: `expected_text_origin_x`
    --> crates/nucleotide/src/document.rs:1518:21
     |
1518 |                 let expected_text_origin_x =
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_expected_text_origin_x`

warning: unused variable: `clamped_content_pos`
    --> crates/nucleotide/src/document.rs:1636:21
     |
1636 |                 let clamped_content_pos = Point {
     |                     ^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_clamped_content_pos`

warning: unused variable: `clamped_x`
    --> crates/nucleotide/src/document.rs:1666:26
     |
1666 |                     let (clamped_x, x_overshoot) = if raw_content_x > line_width {
     |                          ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_clamped_x`

warning: unused variable: `editor_theme`
    --> crates/nucleotide/src/document.rs:2266:21
     |
2266 |                 let editor_theme = cx.global::<crate::ThemeManager>().helix_theme().clone();
     |                     ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_editor_theme`

warning: unused variable: `visual_lines_rendered`
    --> crates/nucleotide/src/document.rs:3017:25
     |
3017 |                     let visual_lines_rendered = visual_line - view_offset.vertical_offset;
     |                         ^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_visual_lines_rendered`

warning: unused variable: `viewport_capacity`
    --> crates/nucleotide/src/document.rs:3019:25
     |
3019 |                     let viewport_capacity = viewport_height_in_lines as usize;
     |                         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_viewport_capacity`

warning: unused variable: `loop_index`
    --> crates/nucleotide/src/document.rs:3029:22
     |
3029 |                 for (loop_index, line_idx) in (first_row..last_row).enumerate() {
     |                      ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_loop_index`

warning: variable `actual_lines_rendered` is assigned to, but never used
    --> crates/nucleotide/src/document.rs:3234:25
     |
3234 |                 let mut actual_lines_rendered = 0;
     |                         ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: consider using `_actual_lines_rendered` instead

warning: unused variable: `viewport_capacity`
    --> crates/nucleotide/src/document.rs:3251:21
     |
3251 |                 let viewport_capacity = viewport_height_in_lines as usize;
     |                     ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_viewport_capacity`

Some errors have detailed explanations: E0277, E0432.
For more information about an error, try `rustc --explain E0277`.
warning: `nucleotide` (lib) generated 28 warnings
error: could not compile `nucleotide` (lib) due to 15 previous errors; 28 warnings emitted
