# This template contains all of the possible sections and their default values

# Note that all fields that take a lint level have these possible values:
# * deny - An error will be produced and the check will fail
# * warn - A warning will be produced, but the check will not fail
# * allow - No warning or error will be produced, though in some cases a note
# will still be displayed

# Root options

# The graph table configures how the dependency graph is constructed and thus
# which crates the checks are performed against
[graph]
# If 1 or more target triples (and optionally, target_features) are specified,
# only the specified targets will be checked when running `cargo deny check`.
# This means, if a particular package is only ever used as a target specific
# dependency, such as, for example, the `nix` crate only being used via the
# `target_family = "unix"` configuration, that only having windows targets in
# this list would mean the nix crate, as well as any of its exclusive
# dependencies not shared by any other crates, would be ignored, as the target
# list here is effectively saying which targets you are building for.
targets = [
    # The triple can be any string, but only the target triples built in to
    # rustc (as of 1.40) can be checked against actual config expressions
    #{ triple = "x86_64-unknown-linux-musl" },
    # You can also specify which target_features you promise are enabled for a
    # particular target. target_features are currently not validated against
    # the actual valid features supported by the target architecture.
    #{ triple = "wasm32-unknown-unknown", features = ["atomics"] },
]
# When creating the dependency graph used as the source of truth when checks are
# executed, this field can be used to prune crates from the graph, removing them
# from the view of cargo-deny. This is an extremely heavy hammer, as if a crate
# is pruned from the graph, all of its dependencies will also be pruned unless
# they are connected to another crate in the graph that hasn't been pruned,
# so it should be used with care. The identifiers are [Package ID Specifications]
# (https://doc.rust-lang.org/cargo/reference/pkgid-spec.html)
#exclude = []
# If true, metadata will be collected with `--all-features`. Note that this can't
# be toggled off if true, if you want to conditionally enable `--all-features` it
# is recommended to pass `--all-features` on the cmd line instead
all-features = false
# If true, metadata will be collected with `--no-default-features`. The same
# caveat with `all-features` applies
no-default-features = false
# If set, these feature will be enabled when collecting metadata. If `--features`
# is specified on the cmd line they will take precedence over this option.
#features = []

# This section is considered when running `cargo deny check advisories`
# More detailed documentation for the advisories section can be found here:
# https://embarkstudios.github.io/cargo-deny/checks/advisories/cfg.html
[advisories]
# The path where the advisory databases are cloned/fetched into
#db-path = "$CARGO_HOME/advisory-dbs"
# The url(s) of the advisory databases to use
#db-urls = ["https://github.com/rustsec/advisory-db"]
# A list of advisory IDs to ignore. Note that ignored advisories will still
# output a note when they are encountered.
ignore = [
    # instant is unmaintained but used by a transitive dependency
    # This is used by futures-lite which is used by GPUI
    "RUSTSEC-2024-0384",
    # paste is unmaintained but used by metal crate
    # This is used by GPUI's metal backend on macOS
    "RUSTSEC-2024-0436",
]

# This section is considered when running `cargo deny check licenses`
# More detailed documentation for the licenses section can be found here:
# https://embarkstudios.github.io/cargo-deny/checks/licenses/cfg.html
[licenses]
# List of explicitly allowed licenses
# See https://spdx.org/licenses/ for list of possible licenses
# [possible values: any SPDX 3.11 short identifier (+ optional exception)].
allow = [
    "MIT",
    "MIT-0",
    "Apache-2.0",
    "Apache-2.0 WITH LLVM-exception",
    "BSD-2-Clause",
    "BSD-3-Clause",
    "ISC",
    "Unicode-DFS-2016",
    "Unicode-3.0",
    "CC0-1.0",
    "MPL-2.0",
    "Zlib",
    "0BSD",
    "BSL-1.0",
    "OpenSSL",
    "NCSA",
    "GPL-3.0",
]
# The confidence threshold for detecting a license from license text.
# [possible values: any between 0.0 and 1.0].
confidence-threshold = 0.8
# Allow 1 or more licenses on a per-crate basis, so that particular licenses
# aren't accepted for every possible crate as with the normal allow list
exceptions = [
    # Each entry is the crate and version constraint, and its specific allow
    # list
    #{ allow = ["ISC", "MIT", "OpenSSL"], crate = "openssl" },
]

# Some crates don't have (easily) machine readable licensing information,
# adding a clarification entry for it allows you to manually specify the
# licensing information
[[licenses.clarify]]
# The package spec the clarification applies to
crate = "ring"
# The SPDX expression for the license requirements of the crate
expression = "MIT AND ISC AND OpenSSL"
# One or more files in the crate's source used as the "source of truth" for
# the license expression. If the contents match, the clarification will be used.
license-files = [
    # Each entry is a crate relative path, and the (opaque) hash of its contents
    { path = "LICENSE", hash = 0xbd0eed23 }
]

[[licenses.clarify]]
crate = "arrayref"
expression = "BSD-2-Clause"
license-files = [
    { path = "LICENSE", hash = 0x6df8b75a }
]

[[licenses.clarify]]
crate = "curve25519-dalek"
expression = "BSD-3-Clause"
license-files = [
    { path = "LICENSE", hash = 0xb5c8c24d }
]

[[licenses.clarify]]
crate = "encoding_rs"
expression = "(Apache-2.0 OR MIT) AND BSD-3-Clause"
license-files = [
    { path = "COPYRIGHT", hash = 0x39f8ad31 }
]

[[licenses.clarify]]
crate = "heed"
expression = "MIT"
license-files = [
    { path = "LICENSE", hash = 0xf3f55e98 }
]

[[licenses.clarify]]
crate = "rodio"
expression = "MIT OR Apache-2.0"
license-files = [
    { path = "LICENSE", hash = 0xe79a59ef }
]

[[licenses.clarify]]
crate = "symphonia"
expression = "MPL-2.0"
license-files = [
    { path = "LICENSE", hash = 0xbecfbcc1 }
]

[[licenses.clarify]]
crate = "symphonia-codec-aac"
expression = "MPL-2.0"
license-files = [
    { path = "LICENSE", hash = 0xbecfbcc1 }
]

[[licenses.clarify]]
crate = "symphonia-codec-adpcm"
expression = "MPL-2.0"
license-files = [
    { path = "LICENSE", hash = 0xbecfbcc1 }
]

[[licenses.clarify]]
crate = "symphonia-codec-alac"
expression = "MPL-2.0"
license-files = [
    { path = "LICENSE", hash = 0xbecfbcc1 }
]

[[licenses.clarify]]
crate = "symphonia-codec-pcm"
expression = "MPL-2.0"
license-files = [
    { path = "LICENSE", hash = 0xbecfbcc1 }
]

[[licenses.clarify]]
crate = "symphonia-codec-vorbis"
expression = "MPL-2.0"
license-files = [
    { path = "LICENSE", hash = 0xbecfbcc1 }
]

[[licenses.clarify]]
crate = "symphonia-core"
expression = "MPL-2.0"
license-files = [
    { path = "LICENSE", hash = 0xbecfbcc1 }
]

[[licenses.clarify]]
crate = "symphonia-format-caf"
expression = "MPL-2.0"
license-files = [
    { path = "LICENSE", hash = 0xbecfbcc1 }
]

[[licenses.clarify]]
crate = "symphonia-format-isomp4"
expression = "MPL-2.0"
license-files = [
    { path = "LICENSE", hash = 0xbecfbcc1 }
]

[[licenses.clarify]]
crate = "symphonia-format-mkv"
expression = "MPL-2.0"
license-files = [
    { path = "LICENSE", hash = 0xbecfbcc1 }
]

[[licenses.clarify]]
crate = "symphonia-format-ogg"
expression = "MPL-2.0"
license-files = [
    { path = "LICENSE", hash = 0xbecfbcc1 }
]

[[licenses.clarify]]
crate = "symphonia-format-wav"
expression = "MPL-2.0"
license-files = [
    { path = "LICENSE", hash = 0xbecfbcc1 }
]

[[licenses.clarify]]
crate = "symphonia-metadata"
expression = "MPL-2.0"
license-files = [
    { path = "LICENSE", hash = 0xbecfbcc1 }
]

[[licenses.clarify]]
crate = "lmdb-master-sys"
expression = "OpenSSL"
license-files = [
    { path = "LICENSE", hash = 0xcd76ece }
]

# This section is considered when running `cargo deny check bans`.
# More detailed documentation about the bans section can be found here:
# https://embarkstudios.github.io/cargo-deny/checks/bans/cfg.html
[bans]
# Lint level for when multiple versions of the same crate are detected
multiple-versions = "warn"
# Lint level for when a crate marked as 'deny' is detected
wildcards = "allow"
# The graph highlighting used when creating dotgraphs for crates
# with multiple versions
# * lowest-version - The path to the lowest versioned duplicate is highlighted
# * simplest-path - The path to the version with the fewest edges is highlighted
# * all - Both lowest-version and simplest-path are used
highlight = "all"
# The default lint level for `default` features for crates that are members of
# the workspace that is being checked. This can be overridden by allowing/denying
# `default` on a crate-by-crate basis if desired.
workspace-default-features = "allow"
# The default lint level for `default` features for external crates that are not
# members of the workspace. This can be overridden by allowing/denying `default`
# on a crate-by-crate basis if desired.
external-default-features = "allow"
# List of crates that are allowed. Use with care!
allow = [
    #{ crate = "ansi_term", use-instead = "owo-colors" },
]
# List of crates to deny
deny = [
    # Each entry the name of a crate and a version range. If version is
    # not specified, all versions will be matched.
    #{ crate = "ansi_term" },
]

# List of features to allow/deny
# Each entry the name of a crate and a version range. If version is
# not specified, all versions will be matched.
#[[bans.features]]
#crate = "reqwest"
# Features to not allow
#deny = ["json"]
# Features to allow
#allow = [
#    "rustls",
#    "__rustls",
#    "__tls",
#    "hyper-rustls",
#    "rustls",
#    "rustls-pemfile",
#    "rustls-tls-webpki-roots",
#    "tokio-rustls",
#    "webpki-roots",
#]
# If true, the allowed features must exactly match the enabled feature set. If
# this is set there is no point setting `deny`
#exact = true

# Certain crates/versions that will be skipped when doing duplicate detection.
skip = [
    #{ crate = "ansi_term", version = "=0.11.0" },
]
# Similarly named crates that are allowed to coexist
skip-tree = [
    #{ crate = "ansi_term", version = "=0.11.0", depth = 20 },
]

# This section is considered when running `cargo deny check sources`.
# More detailed documentation about the sources section can be found here:
# https://embarkstudios.github.io/cargo-deny/checks/sources/cfg.html
[sources]
# Lint level for what to happen when a crate from a crate registry that is not in the allow list is encountered
unknown-registry = "warn"
# Lint level for what to happen when a crate from a git repository that is not in the allow list is encountered
unknown-git = "warn"
# List of allowed crate registries. Defaults to the crates.io index
# if not specified. If it is specified but empty, no registries are allowed.
allow-registry = ["https://github.com/rust-lang/crates.io-index"]
# List of allowed Git repositories
allow-git = [
    # blade dependencies (used by GPUI)
    "https://github.com/kvark/blade",
    # GPUI and its dependencies from Zed
    "https://github.com/zed-industries/zed",
    # Font-kit (used by GPUI)
    "https://github.com/zed-industries/font-kit",
    # Helix editor
    "https://github.com/helix-editor/helix",
    # XIM input method support (used by GPUI)
    "https://github.com/XDeme1/xim-rs",
]