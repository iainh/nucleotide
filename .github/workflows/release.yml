name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v0.1.0)'
        required: true
        type: string

jobs:
  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            libxcb-xfixes0-dev \
            libxcb-shape0-dev \
            libxrandr-dev \
            libxi-dev \
            libgl1-mesa-dev \
            libvulkan-dev \
            libfreetype6-dev \
            libfontconfig1-dev \
            mold
      
      - name: Build release
        run: cargo build --release
      
      - name: Prepare distribution
        run: |
          # Clone helix for runtime files
          git clone --depth 1 --branch 25.07.1 https://github.com/helix-editor/helix.git helix-temp
          
          # Create distribution
          mkdir -p nucleotide-linux/bin
          mkdir -p nucleotide-linux/share/nucleotide/runtime
          
          cp target/release/nucl nucleotide-linux/bin/
          cp -r helix-temp/runtime/* nucleotide-linux/share/nucleotide/runtime/
          cp README.md LICENSE nucleotide-linux/ 2>/dev/null || true
          
          # Create tarball
          tar czf nucleotide-linux-x86_64.tar.gz nucleotide-linux
          
          rm -rf helix-temp
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: nucleotide-linux-x86_64.tar.gz

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - arch: x86_64
            target: x86_64-apple-darwin
          - arch: aarch64
            target: aarch64-apple-darwin
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Build release
        run: |
          cargo build --release --target ${{ matrix.target }}
          cp target/${{ matrix.target }}/release/nucl target/release/nucl
      
      - name: Prepare runtime
        run: |
          git clone --depth 1 --branch 25.07.1 https://github.com/helix-editor/helix.git helix-temp
          mkdir -p runtime
          cp -r helix-temp/runtime/* runtime/
          rm -rf helix-temp
      
      - name: Create app bundle
        run: |
          chmod +x bundle-mac.sh
          ./bundle-mac.sh
          
          # Create DMG
          mkdir -p dmg-content
          cp -r Nucleotide.app dmg-content/
          ln -s /Applications dmg-content/Applications
          hdiutil create -volname "Nucleotide" -srcfolder dmg-content -ov -format UDZO Nucleotide-${{ matrix.arch }}.dmg
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}-build
          path: Nucleotide-${{ matrix.arch }}.dmg

  build-macos-universal:
    name: Build macOS Universal
    runs-on: macos-latest
    needs: build-macos
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-x86_64-build
          path: x86_64
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-aarch64-build
          path: aarch64
      
      - name: Create universal binary
        run: |
          # Extract apps from DMGs
          hdiutil attach x86_64/Nucleotide-x86_64.dmg -mountpoint /tmp/x86_64-mount
          cp -r /tmp/x86_64-mount/Nucleotide.app ./Nucleotide-x86_64.app
          hdiutil detach /tmp/x86_64-mount
          
          hdiutil attach aarch64/Nucleotide-aarch64.dmg -mountpoint /tmp/aarch64-mount
          cp -r /tmp/aarch64-mount/Nucleotide.app ./Nucleotide-aarch64.app
          hdiutil detach /tmp/aarch64-mount
          
          # Create universal app
          cp -r Nucleotide-x86_64.app Nucleotide.app
          lipo -create \
            Nucleotide-x86_64.app/Contents/MacOS/nucl \
            Nucleotide-aarch64.app/Contents/MacOS/nucl \
            -output Nucleotide.app/Contents/MacOS/nucl
          
          # Create universal DMG
          mkdir -p dmg-content
          cp -r Nucleotide.app dmg-content/
          ln -s /Applications dmg-content/Applications
          hdiutil create -volname "Nucleotide" -srcfolder dmg-content -ov -format UDZO Nucleotide-universal.dmg
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal-build
          path: Nucleotide-universal.dmg

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos-universal]
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Prepare release files
        run: |
          mkdir -p release
          cp artifacts/linux-build/nucleotide-linux-x86_64.tar.gz release/
          cp artifacts/macos-universal-build/Nucleotide-universal.dmg release/Nucleotide.dmg
          cp artifacts/macos-x86_64-build/Nucleotide-x86_64.dmg release/
          cp artifacts/macos-aarch64-build/Nucleotide-aarch64.dmg release/
          
          # Generate checksums
          cd release
          sha256sum * > SHA256SUMS
          cd ..
          
          echo "Release files:"
          ls -lh release/
      
      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Nucleotide ${{ steps.version.outputs.version }}
          body: |
            ## Downloads
            
            ### macOS
            - **Universal (Intel + Apple Silicon):** `Nucleotide.dmg`
            - **Intel only:** `Nucleotide-x86_64.dmg`
            - **Apple Silicon only:** `Nucleotide-aarch64.dmg`
            
            ### Linux
            - **x86_64:** `nucleotide-linux-x86_64.tar.gz`
            
            ## Installation
            
            ### macOS
            1. Download the appropriate DMG file
            2. Open the DMG and drag Nucleotide to Applications
            3. On first launch, you may need to right-click and select "Open" to bypass Gatekeeper
            
            ### Linux
            1. Download and extract the tarball:
               ```bash
               tar xzf nucleotide-linux-x86_64.tar.gz
               cd nucleotide-linux
               ```
            2. Add to PATH or run directly:
               ```bash
               ./bin/nucl
               ```
            
            ## Checksums
            SHA256 checksums are available in `SHA256SUMS`
          draft: true
          files: |
            release/Nucleotide.dmg
            release/Nucleotide-x86_64.dmg
            release/Nucleotide-aarch64.dmg
            release/nucleotide-linux-x86_64.tar.gz
            release/SHA256SUMS