name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v0.1.0)'
        required: true
        type: string

jobs:
  build-macos:
    name: Build macOS (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-13  # Intel
            arch: x86_64-darwin
            runner_arch: x64
          - os: macos-14  # Apple Silicon
            arch: aarch64-darwin
            runner_arch: arm64
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Cachix
        uses: cachix/cachix-action@v13
        with:
          name: helix-gpui
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          skipPush: ${{ secrets.CACHIX_AUTH_TOKEN == '' }}
      
      - name: Build app bundle
        run: |
          nix build .#helix-gpui --print-build-logs
          
          # Verify the bundle was created
          if [ ! -d "result/Applications/Helix.app" ]; then
            echo "Error: App bundle not found!"
            exit 1
          fi
          
          # Get bundle info
          echo "Bundle created successfully:"
          du -sh result/Applications/Helix.app
          echo ""
          echo "Binary architecture:"
          file result/Applications/Helix.app/Contents/MacOS/Helix
      
      - name: Create DMG
        run: |
          nix build .#helix-gpui-dmg --print-build-logs
          
          # Copy DMG to workspace
          cp result/*.dmg helix-gpui-${{ matrix.arch }}.dmg
          
          echo "DMG created:"
          ls -lh helix-gpui-${{ matrix.arch }}.dmg
      
      - name: Create tarball
        run: |
          # Create a tarball of the app bundle
          cd result/Applications
          tar czf ../../helix-gpui-${{ matrix.arch }}.tar.gz Helix.app
          cd ../..
          
          echo "Tarball created:"
          ls -lh helix-gpui-${{ matrix.arch }}.tar.gz
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: helix-gpui-${{ matrix.arch }}
          path: |
            helix-gpui-${{ matrix.arch }}.dmg
            helix-gpui-${{ matrix.arch }}.tar.gz
  
  build-linux:
    name: Build Linux (${{ matrix.arch }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64-linux, aarch64-linux]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup QEMU for ARM builds
        if: matrix.arch == 'aarch64-linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      
      - name: Setup Cachix
        uses: cachix/cachix-action@v13
        with:
          name: helix-gpui
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          skipPush: ${{ secrets.CACHIX_AUTH_TOKEN == '' }}
      
      - name: Build binary
        run: |
          if [ "${{ matrix.arch }}" = "aarch64-linux" ]; then
            # Cross-compile for ARM64
            nix build .#packages.aarch64-linux.helix-gpui --print-build-logs
          else
            nix build .#helix-gpui --print-build-logs
          fi
          
          # Verify the binary was created
          if [ ! -f "result/bin/hxg" ]; then
            echo "Error: Binary not found!"
            exit 1
          fi
          
          echo "Binary created successfully:"
          file result/bin/hxg
      
      - name: Create tarball
        run: |
          # Create distribution directory
          mkdir -p helix-gpui-${{ matrix.arch }}
          
          # Copy binary and runtime
          cp -r result/* helix-gpui-${{ matrix.arch }}/
          
          # Create tarball
          tar czf helix-gpui-${{ matrix.arch }}.tar.gz helix-gpui-${{ matrix.arch }}
          
          echo "Tarball created:"
          ls -lh helix-gpui-${{ matrix.arch }}.tar.gz
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: helix-gpui-${{ matrix.arch }}
          path: helix-gpui-${{ matrix.arch }}.tar.gz
  
  create-release:
    name: Create Release
    needs: [build-macos, build-linux]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: List artifacts
        run: |
          echo "Downloaded artifacts:"
          find artifacts -type f -name "*.dmg" -o -name "*.tar.gz" | sort
      
      - name: Generate changelog
        id: changelog
        run: |
          # Get the tag name
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${{ github.ref_name }}"
          fi
          
          echo "Creating release for tag: $TAG"
          
          # Generate basic changelog (customize as needed)
          cat > CHANGELOG.md << EOF
          ## What's New
          
          This release includes:
          - Optimized macOS app bundles for both Intel and Apple Silicon
          - Linux binaries for x86_64 and ARM64
          - Complete Helix runtime with all grammars and themes
          - Performance improvements with LTO optimization
          
          ## Installation
          
          ### macOS
          - Download the DMG for your architecture (Intel or Apple Silicon)
          - Open the DMG and drag Helix.app to Applications
          - Or download the tarball and extract to /Applications
          
          ### Linux
          - Download the tarball for your architecture
          - Extract to your preferred location
          - Add the bin directory to your PATH
          
          ## Checksums
          
          EOF
          
          # Generate checksums
          cd artifacts
          for file in */*.{dmg,tar.gz}; do
            if [ -f "$file" ]; then
              sha256sum "$file" >> ../CHANGELOG.md
            fi
          done
          cd ..
          
          echo "changelog_path=CHANGELOG.md" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.changelog.outputs.tag }}
          name: Helix GPUI ${{ steps.changelog.outputs.tag }}
          body_path: ${{ steps.changelog.outputs.changelog_path }}
          draft: false
          prerelease: ${{ contains(steps.changelog.outputs.tag, 'beta') || contains(steps.changelog.outputs.tag, 'alpha') }}
          files: |
            artifacts/**/*.dmg
            artifacts/**/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  # Optional: Create a universal macOS binary
  create-universal-macos:
    name: Create Universal macOS Binary
    needs: [build-macos]
    runs-on: macos-latest
    
    steps:
      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: helix-gpui-*-darwin
          path: artifacts
      
      - name: Extract and create universal binary
        run: |
          # Extract both architectures
          tar xzf artifacts/helix-gpui-x86_64-darwin/helix-gpui-x86_64-darwin.tar.gz
          mv Helix.app Helix-x86_64.app
          
          tar xzf artifacts/helix-gpui-aarch64-darwin/helix-gpui-aarch64-darwin.tar.gz
          mv Helix.app Helix-arm64.app
          
          # Create universal binary
          mkdir -p Helix.app/Contents/MacOS
          lipo -create \
            Helix-x86_64.app/Contents/MacOS/Helix \
            Helix-arm64.app/Contents/MacOS/Helix \
            -output Helix.app/Contents/MacOS/Helix
          
          # Copy rest of the bundle (they should be identical)
          cp -r Helix-x86_64.app/Contents/Resources Helix.app/Contents/
          cp Helix-x86_64.app/Contents/Info.plist Helix.app/Contents/
          
          # Verify universal binary
          echo "Universal binary created:"
          file Helix.app/Contents/MacOS/Helix
          lipo -info Helix.app/Contents/MacOS/Helix
          
          # Create universal tarball
          tar czf helix-gpui-universal-darwin.tar.gz Helix.app
          
          # Create universal DMG
          hdiutil create -volname "Helix GPUI" -srcfolder Helix.app -ov -format UDZO helix-gpui-universal-darwin.dmg
      
      - name: Upload universal artifacts
        uses: actions/upload-artifact@v4
        with:
          name: helix-gpui-universal-darwin
          path: |
            helix-gpui-universal-darwin.tar.gz
            helix-gpui-universal-darwin.dmg
      
      - name: Add to release
        if: needs.create-release.result == 'success'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            helix-gpui-universal-darwin.tar.gz
            helix-gpui-universal-darwin.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}