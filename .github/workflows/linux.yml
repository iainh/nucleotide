name: Build for Linux

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  check-format:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
      
      - name: Check Rust formatting
        run: |
          nix develop --command cargo fmt --check

  clippy:
    name: Run clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
      
      - name: Setup Cachix
        uses: cachix/cachix-action@v13
        with:
          name: helix-gpui
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          skipPush: ${{ secrets.CACHIX_AUTH_TOKEN == '' }}
      
      - name: Run clippy
        run: |
          nix develop --command cargo clippy --all-targets -- --deny warnings

  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
      
      - name: Setup Cachix
        uses: cachix/cachix-action@v13
        with:
          name: helix-gpui
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          skipPush: ${{ secrets.CACHIX_AUTH_TOKEN == '' }}
      
      - name: Run tests
        run: |
          nix develop --command cargo test

  build:
    name: Build Linux binary
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64]  # aarch64 requires cross-compilation setup
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Cachix
        uses: cachix/cachix-action@v13
        with:
          name: helix-gpui
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          skipPush: ${{ secrets.CACHIX_AUTH_TOKEN == '' }}
      
      - name: Build Linux package with Nix
        run: |
          echo "Building Linux package for ${{ matrix.arch }} using Nix..."
          
          # Build runtime files
          nix build .#runtime --print-build-logs
          
          # Build binary in Nix shell
          nix develop --command cargo build --release
          
          # Verify the binary
          if [ -f "target/release/hxg" ]; then
            echo "✓ Binary created successfully"
            echo "Binary info:"
            file target/release/hxg
            ldd target/release/hxg || true
            
            # Check runtime files
            echo ""
            echo "Runtime verification:"
            if [ -d "result/share/helix-gpui/runtime" ]; then
              echo "✓ Runtime directory found"
              echo "  Themes: $(find result/share/helix-gpui/runtime/themes -name "*.toml" 2>/dev/null | wc -l)"
              echo "  Languages: $(find result/share/helix-gpui/runtime/queries -mindepth 1 -type d 2>/dev/null | wc -l)"
            else
              echo "✗ Runtime directory not found!"
              exit 1
            fi
          else
            echo "✗ Binary not found!"
            exit 1
          fi
      
      - name: Test binary launch
        run: |
          # Basic smoke test - check if binary runs and shows help
          target/release/hxg --help || true
      
      - name: Create distribution package
        run: |
          # Create Linux package
          nix develop --command make-linux-package
          
          # Rename for architecture
          mv helix-gpui-linux.tar.gz helix-gpui-linux-${{ matrix.arch }}.tar.gz
          
          # Create README
          cat > helix-gpui-linux-${{ matrix.arch }}/README.md << EOF
          # Helix GPUI for Linux
          
          ## Installation
          
          1. Extract this archive to your preferred location
          2. Add the \`bin\` directory to your PATH:
             \`\`\`bash
             export PATH="\$PATH:/path/to/helix-gpui-linux-${{ matrix.arch }}/bin"
             \`\`\`
          3. Run \`hxg\` to start the editor
          
          ## Runtime Files
          
          Runtime files (themes, grammars, queries) are included in the \`share/helix-gpui/runtime\` directory.
          
          ## Requirements
          
          - Linux kernel 3.2 or later
          - glibc 2.17 or later
          - X11 or Wayland display server
          
          EOF
          
          # Create tarball
          tar czf helix-gpui-linux-${{ matrix.arch }}.tar.gz helix-gpui-linux-${{ matrix.arch }}
          
          echo "Distribution package created:"
          ls -lh helix-gpui-linux-${{ matrix.arch }}.tar.gz
      
      - name: Upload distribution package
        uses: actions/upload-artifact@v4
        with:
          name: helix-gpui-linux-${{ matrix.arch }}
          path: helix-gpui-linux-${{ matrix.arch }}.tar.gz
          retention-days: 7

  # Alternative build using traditional cargo (for comparison/fallback)
  build-cargo:
    name: Build with cargo (fallback)
    runs-on: ubuntu-latest
    if: failure()  # Only run if Nix builds fail
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            libxcb-xfixes0-dev \
            libxcb-shape0-dev \
            libxrandr-dev \
            libxi-dev \
            libgl1-mesa-dev \
            libvulkan-dev \
            libfreetype6-dev \
            libfontconfig1-dev
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build release
        run: cargo build --release
      
      - name: Create distribution
        run: |
          mkdir -p dist/bin
          cp target/release/hxg dist/bin/
          
          # Note: Runtime files would need to be handled separately
          echo "Binary created at dist/bin/hxg"
      
      - name: Upload binary
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: helix-gpui-cargo-linux
          path: dist/
          retention-days: 7
