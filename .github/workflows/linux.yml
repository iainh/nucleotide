name: Build for Linux

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  check-format:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      
      - name: Check Rust formatting
        run: cargo fmt --check

  clippy:
    name: Run clippy
    runs-on: ubuntu-latest
    continue-on-error: true  # Allow clippy to fail without blocking the workflow
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            libxcb-xfixes0-dev \
            libxcb-shape0-dev \
            libxrandr-dev \
            libxi-dev \
            libgl1-mesa-dev \
            libvulkan-dev \
            libfreetype6-dev \
            libfontconfig1-dev
      
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Run clippy
        run: cargo clippy --all-targets

  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            libxcb-xfixes0-dev \
            libxcb-shape0-dev \
            libxrandr-dev \
            libxi-dev \
            libgl1-mesa-dev \
            libvulkan-dev \
            libfreetype6-dev \
            libfontconfig1-dev
      
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Run tests
        run: cargo test

  build:
    name: Build Linux binary
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            libxcb-xfixes0-dev \
            libxcb-shape0-dev \
            libxrandr-dev \
            libxi-dev \
            libgl1-mesa-dev \
            libvulkan-dev \
            libfreetype6-dev \
            libfontconfig1-dev
      
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Build release binary
        run: cargo build --release
      
      - name: Prepare runtime files
        run: |
          # Clone helix to get runtime files
          git clone --depth 1 --branch 25.07.1 https://github.com/helix-editor/helix.git helix-temp
          
          # Create distribution structure
          mkdir -p dist/bin
          mkdir -p dist/share/nucl/runtime
          
          # Copy binary
          cp target/release/nucl dist/bin/
          
          # Copy runtime files from helix
          cp -r helix-temp/runtime/* dist/share/nucl/runtime/
          
          # Clean up
          rm -rf helix-temp
          
          echo "Distribution structure created:"
          ls -la dist/
          ls -la dist/share/nucl/runtime/ | head -20
      
      - name: Test binary launch
        run: |
          # Set runtime path
          export HELIX_RUNTIME="$(pwd)/dist/share/nucl/runtime"
          
          # Basic smoke test - check if binary runs and shows version
          ./dist/bin/nucl --version || true
      
      - name: Create distribution package
        run: |
          # Create tarball with proper structure
          cd dist
          tar czf ../nucleotide-linux-x86_64.tar.gz *
          cd ..
          
          echo "Distribution package created:"
          ls -lh nucleotide-linux-x86_64.tar.gz
      
      - name: Upload distribution package
        uses: actions/upload-artifact@v4
        with:
          name: nucleotide-linux-x86_64
          path: nucleotide-linux-x86_64.tar.gz
          retention-days: 7

  build-with-nix:
    name: Build with Nix (using GitHub cache)
    runs-on: ubuntu-latest
    continue-on-error: true  # Optional build - don't fail the whole workflow
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
      
      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      
      - name: Build with Nix
        run: |
          # Build runtime files
          nix build .#runtime --print-build-logs
          
          # Build in Nix shell
          nix develop --command cargo build --release
          
          # Test the result
          if [ -f "target/release/nucl" ]; then
            echo "✓ Binary created successfully"
            file target/release/nucl
          else
            echo "✗ Binary not found!"
            exit 1
          fi
      
      - name: Create Nix distribution
        run: |
          # Create distribution using Nix helper
          nix develop --command make-linux-package
          
          echo "Nix distribution package created:"
          ls -lh nucleotide-linux.tar.gz
      
      - name: Upload Nix package
        uses: actions/upload-artifact@v4
        with:
          name: nucleotide-nix-linux-x86_64
          path: nucleotide-linux.tar.gz
          retention-days: 7