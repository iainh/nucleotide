name: Build for macOS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  check-format:
    name: Check formatting
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
      
      - name: Check Rust formatting
        run: |
          nix develop --command cargo fmt --check

  clippy:
    name: Run clippy
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
      
      - name: Setup Cachix
        uses: cachix/cachix-action@v13
        with:
          name: helix-gpui
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          skipPush: ${{ secrets.CACHIX_AUTH_TOKEN == '' }}
      
      - name: Run clippy
        run: |
          nix develop --command cargo clippy --all-targets -- --deny warnings

  test:
    name: Run tests
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
      
      - name: Setup Cachix
        uses: cachix/cachix-action@v13
        with:
          name: helix-gpui
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          skipPush: ${{ secrets.CACHIX_AUTH_TOKEN == '' }}
      
      - name: Run tests
        run: |
          nix develop --command cargo test

  build:
    name: Build app bundle
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-13  # Intel
            arch: x86_64
          - os: macos-14  # Apple Silicon
            arch: aarch64
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Cachix
        uses: cachix/cachix-action@v13
        with:
          name: helix-gpui
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          skipPush: ${{ secrets.CACHIX_AUTH_TOKEN == '' }}
      
      - name: Build app bundle with Nix
        run: |
          echo "Building macOS bundle for ${{ matrix.arch }} using Nix..."
          
          # Build runtime files
          nix build .#runtime --print-build-logs
          
          # Build binary in Nix shell
          nix develop --command cargo build --release
          
          # Create app bundle
          nix develop --command make-macos-bundle
          
          # Verify the bundle
          if [ -d "Helix.app" ]; then
            echo "✓ App bundle created successfully"
            echo "Bundle size: $(du -sh Helix.app | cut -f1)"
            echo "Binary info:"
            file Helix.app/Contents/MacOS/Helix
            
            # Check runtime files
            echo ""
            echo "Runtime verification:"
            if [ -d "Helix.app/Contents/MacOS/runtime" ]; then
              echo "✓ Runtime directory found"
              echo "  Themes: $(find Helix.app/Contents/MacOS/runtime/themes -name "*.toml" 2>/dev/null | wc -l)"
              echo "  Languages: $(find Helix.app/Contents/MacOS/runtime/queries -mindepth 1 -type d 2>/dev/null | wc -l)"
            else
              echo "✗ Runtime directory not found!"
              exit 1
            fi
          else
            echo "✗ App bundle not found!"
            exit 1
          fi
      
      - name: Test app launch
        run: |
          # Basic smoke test - check if binary runs and shows help
          ./Helix.app/Contents/MacOS/Helix --help || true
      
      - name: Upload app bundle
        uses: actions/upload-artifact@v4
        with:
          name: helix-gpui-${{ matrix.arch }}-macos
          path: Helix.app
          retention-days: 7

  # Alternative build using traditional cargo (for comparison/fallback)
  build-cargo:
    name: Build with cargo (fallback)
    runs-on: macos-latest
    if: failure()  # Only run if Nix builds fail
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build release
        run: cargo build --release
      
      - name: Run bundle script
        run: |
          if [ -f "bundle-mac.sh" ]; then
            chmod +x bundle-mac.sh
            ./bundle-mac.sh
          else
            echo "Bundle script not found, skipping..."
          fi
      
      - name: Upload bundle
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: helix-gpui-cargo-macos
          path: Helix.app
          retention-days: 7