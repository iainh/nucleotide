name: Build for macOS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  check-format:
    name: Check formatting
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      
      - name: Check Rust formatting
        run: cargo fmt --check

  clippy:
    name: Run clippy
    runs-on: macos-latest
    continue-on-error: true  # Allow clippy to fail without blocking the workflow
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Run clippy
        run: cargo clippy --all-targets

  test:
    name: Run tests
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Run tests
        run: cargo test

  build:
    name: Build macOS app
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x86_64, aarch64]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.arch == 'x86_64' && 'x86_64-apple-darwin' || 'aarch64-apple-darwin' }}
      
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.arch }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-cargo-
      
      - name: Build release binary
        run: |
          TARGET=${{ matrix.arch == 'x86_64' && 'x86_64-apple-darwin' || 'aarch64-apple-darwin' }}
          cargo build --release --target $TARGET
          
          # Copy to expected location for bundling
          cp target/$TARGET/release/nucl target/release/nucl
      
      - name: Prepare runtime files
        run: |
          # Clone helix to get runtime files
          git clone --depth 1 --branch 25.07.1 https://github.com/helix-editor/helix.git helix-temp
          
          # Create runtime directory
          mkdir -p runtime
          cp -r helix-temp/runtime/* runtime/
          
          # Clean up
          rm -rf helix-temp
          
          echo "Runtime files prepared:"
          ls -la runtime/ | head -20
      
      - name: Create macOS app bundle
        run: |
          # Use the bundle script
          chmod +x bundle-mac.sh
          ./bundle-mac.sh
          
          # Verify the app bundle
          if [ -d "Nucleotide.app" ]; then
            echo "✓ App bundle created successfully"
            echo "App bundle contents:"
            ls -la Nucleotide.app/Contents/
            ls -la Nucleotide.app/Contents/MacOS/
            
            # Check if runtime is included
            if [ -d "Nucleotide.app/Contents/MacOS/runtime" ]; then
              echo "✓ Runtime files included"
              echo "  Themes: $(find Nucleotide.app/Contents/MacOS/runtime/themes -name "*.toml" 2>/dev/null | wc -l)"
              echo "  Languages: $(find Nucleotide.app/Contents/MacOS/runtime/queries -mindepth 1 -type d 2>/dev/null | wc -l)"
            fi
          else
            echo "✗ App bundle not created!"
            exit 1
          fi
      
      - name: Create DMG
        run: |
          # Create a simple DMG
          mkdir -p dmg-content
          cp -r Nucleotide.app dmg-content/
          
          # Create Applications symlink
          ln -s /Applications dmg-content/Applications
          
          # Create DMG
          hdiutil create -volname "Nucleotide" -srcfolder dmg-content -ov -format UDZO Nucleotide-${{ matrix.arch }}.dmg
          
          echo "DMG created:"
          ls -lh Nucleotide-${{ matrix.arch }}.dmg
          
          # Clean up
          rm -rf dmg-content
      
      - name: Upload DMG
        uses: actions/upload-artifact@v4
        with:
          name: nucleotide-macos-${{ matrix.arch }}
          path: Nucleotide-${{ matrix.arch }}.dmg
          retention-days: 7

  build-universal:
    name: Build Universal macOS app
    runs-on: macos-latest
    needs: build
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download x86_64 artifact
        uses: actions/download-artifact@v4
        with:
          name: nucleotide-macos-x86_64
          path: x86_64
      
      - name: Download aarch64 artifact
        uses: actions/download-artifact@v4
        with:
          name: nucleotide-macos-aarch64
          path: aarch64
      
      - name: Extract apps
        run: |
          # Mount and extract x86_64
          hdiutil attach x86_64/Nucleotide-x86_64.dmg -mountpoint /tmp/x86_64-mount
          cp -r /tmp/x86_64-mount/Nucleotide.app ./Nucleotide-x86_64.app
          hdiutil detach /tmp/x86_64-mount
          
          # Mount and extract aarch64
          hdiutil attach aarch64/Nucleotide-aarch64.dmg -mountpoint /tmp/aarch64-mount
          cp -r /tmp/aarch64-mount/Nucleotide.app ./Nucleotide-aarch64.app
          hdiutil detach /tmp/aarch64-mount
      
      - name: Create universal binary
        run: |
          # Create universal app
          cp -r Nucleotide-x86_64.app Nucleotide-Universal.app
          
          # Create universal binary using lipo
          lipo -create \
            Nucleotide-x86_64.app/Contents/MacOS/nucl \
            Nucleotide-aarch64.app/Contents/MacOS/nucl \
            -output Nucleotide-Universal.app/Contents/MacOS/nucl
          
          # Verify universal binary
          echo "Universal binary created:"
          file Nucleotide-Universal.app/Contents/MacOS/nucl
          lipo -info Nucleotide-Universal.app/Contents/MacOS/nucl
      
      - name: Create Universal DMG
        run: |
          # Create DMG content
          mkdir -p dmg-content
          cp -r Nucleotide-Universal.app dmg-content/Nucleotide.app
          ln -s /Applications dmg-content/Applications
          
          # Create DMG
          hdiutil create -volname "Nucleotide" -srcfolder dmg-content -ov -format UDZO Nucleotide-universal.dmg
          
          echo "Universal DMG created:"
          ls -lh Nucleotide-universal.dmg
      
      - name: Upload Universal DMG
        uses: actions/upload-artifact@v4
        with:
          name: nucleotide-macos-universal
          path: Nucleotide-universal.dmg
          retention-days: 7

  build-with-nix:
    name: Build with Nix on macOS (using GitHub cache)
    runs-on: macos-latest
    continue-on-error: true  # Optional build - don't fail the whole workflow
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
      
      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      
      - name: Build with Nix
        run: |
          # Build runtime files
          nix build .#runtime --print-build-logs
          
          # Build in Nix shell
          nix develop --command cargo build --release
          
          # Test the result
          if [ -f "target/release/nucl" ]; then
            echo "✓ Binary created successfully"
            file target/release/nucl
          else
            echo "✗ Binary not found!"
            exit 1
          fi
      
      - name: Create Nix app bundle
        run: |
          # Run the Nix-based bundle command
          nix develop --command make-macos-bundle
          
          # Verify the app
          if [ -d "Nucleotide.app" ]; then
            echo "✓ Nix app bundle created"
            
            # Create DMG
            mkdir -p dmg-content
            cp -r Nucleotide.app dmg-content/
            ln -s /Applications dmg-content/Applications
            hdiutil create -volname "Nucleotide" -srcfolder dmg-content -ov -format UDZO Nucleotide-nix.dmg
            
            echo "Nix DMG created:"
            ls -lh Nucleotide-nix.dmg
          fi
      
      - name: Upload Nix DMG
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: nucleotide-macos-nix
          path: Nucleotide-nix.dmg
          retention-days: 7